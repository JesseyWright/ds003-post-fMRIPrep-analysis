"""
Analysis workflows (SPM) for ds000109.

This script replicates, using three distinct software pipelines, the contrast shown in
figure 5 of https://www.jneurosci.org/content/32/16/5553 ; which compare two task conditions
over two age groups (young / old and false-belief / false-photo)

"""

# General Set up ###
from nipype.pipeline import engine as pe
from nipype.algorithms.modelgen import SpecifyModel
from nipype.interfaces import spm
from niworkflows.interfaces.bids import DerivativesDataSink as BIDSDerivatives

# >>> Verify, when done, that all these functions are infact required
from .utils import _dict_ds, _bids2nipypeinfo, _len, _dof, _neg

DATA_ITEMS = ['bold', 'mask', 'events', 'regressors', 'tr']


class DerivativesDataSink(BIDSDerivatives):
    out_path_base = 'SPMAnalysis'


class GroupDerivativesDataSink(BIDSDerivatives):
    out_path_base = 'SPM-all'


def first_level_wf(in_files, output_dir, fwhm=6.0, name='spm_1st_level'):
    """
    Creates the first level of analysis (individual runs).

    We aim to reproduce 2 contrast maps. The first is for "young" subjects,
    and the second "old" subjects.
    Both are the same contrast, false_belief_story vs. false_belief_photo
    """
    workflow = pe.Workflow(name=name)

    datasource = pe.Node(niu.Function(function=_dict_ds, output_names=DATA_ITEMS),
                         name='datasource')
    datasource.inputs.in_dict = in_files
    datasource.iterables = ('sub', sorted(in_files.keys()))

 	# Extract motion parameters from regressors file
    runinfo = pe.Node(niu.Function(
        input_names=['in_file', 'events_file', 'regressors_file', 'regressors_names'],
        function=_bids2nipypeinfo, output_names=['info', 'realign_file']),
        name='runinfo')

    # Set the column names to be used from the confounds file
    runinfo.inputs.regressors_names = ['dvars', 'framewise_displacement'] + \
        ['a_comp_cor_%02d' % i for i in range(6)] + ['cosine%02d' % i for i in range(4)]

    # Preprocessing fMRIPrep is reluctant to do: spatial smoothing using SPM tool
    smoothing = pe.Node(spm.Smooth(
    	fwhmlist=[fwhm, fwhm, fwhm],
    ), name='smoothing')

    # l1_spec adapts the "Info" dictionary from BIDS2info to the
    # SPM tooling.
    l1_spec = pe.Node(SpecifyModel(
    	name='modelspec',
        parameter_source='SPM',
        input_units='secs',
        high_pass_filter_cutoff=100
    ), name='l1_spec')

    # l1_design creates a first-level model design
    # using SPMs hrf model with time and dispersion derivatives
    # serial correlations are modelled using an autoregressive model AR(1) 
    # during REmL (classical) paramater estimation
    # from manual: https://www.fil.ion.ucl.ac.uk/spm/doc/manual.pdf#page=59
    l1_design = pe.Node(spm.Level1Design(
        bases={'hrf': {'derivs': [1,1]}},
        model_serial_correlations='AR(1)',
    ), name='l1_design')

    # EstimateModel takes in the .mat file generated by l1_design
    # and uses it to estimate the model parameters
    l1_est = pe.Node(spm.EstimateModel(
    	estimation_method='Classical'
    ), name='l1_est')

    # EstimateConstrast estimates the first level contrasts of interest
    l1_contrasts = pe.Node(spm.EstimateConstrast(
    	contrasts =  [('story>photo', 'T',
                    ['false_belief_story', 'false_belief_photo'],
                    [1, -1])]
    ), name='l1_constrasts')

    # Connecting up the workflow
    # Used the following example as a template:
    # https://nipype.readthedocs.io/en/latest/users/examples/fmri_spm.html
    workflow.connect([
    	(datasource, smoothing, [('bold', 'in_files')]),
    	(datasource, runinfo, [
            ('events', 'events_file'),
            ('regressors', 'regressors_file')]),
    	(smooth, l1_spec, [('smoothed_files', 'functional_runs')]),
    	(datasource, l1_spec, [('tr', 'interscan_interval')]),
		(smoothing, runinfo, [('moothed_files', 'in_file')]),
        (runinfo, l1_spec, [
            ('info', 'subject_info'),
            ('realign_file', 'realignment_parameters')]),
    	(l1_spec, l1_design, [('session_info', 'session_info')]),
    	(datasource, l1_design, [('tr', 'interscan_interval')]),
    	(l1_design, l1_est, [('spm_mat_file', 'spm_mat_file')]),
    	(l1_est, l1_constrasts, [
    		('spm_mat_file', 'spm_mat_file')
    		('beta_images', 'beta_images')
    		('residual_image', 'residual_image')]),

    	#Things I think may want/need from the contrasts calculations
    	(l1_contrasts, ... [
    		('con_images', ...)
    		('spmT_images', ...)
    		('spm_mat_file', ...)]),
    ])
    return workflow



